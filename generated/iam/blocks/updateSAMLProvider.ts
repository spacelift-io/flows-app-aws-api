import { AppBlock, events } from "@slflows/sdk/v1";
import { IAMClient, UpdateSAMLProviderCommand } from "@aws-sdk/client-iam";

const updateSAMLProvider: AppBlock = {
  name: "Update SAML Provider",
  description:
    "Updates the metadata document, SAML encryption settings, and private keys for an existing SAML provider.",
  inputs: {
    default: {
      config: {
        region: {
          name: "Region",
          description: "AWS region for this operation",
          type: "string",
          required: true,
        },
        SAMLMetadataDocument: {
          name: "SAML Metadata Document",
          description:
            "An XML document generated by an identity provider (IdP) that supports SAML 2.",
          type: "string",
          required: false,
        },
        SAMLProviderArn: {
          name: "SAML Provider Arn",
          description:
            "The Amazon Resource Name (ARN) of the SAML provider to update.",
          type: "string",
          required: true,
        },
        AssertionEncryptionMode: {
          name: "Assertion Encryption Mode",
          description:
            "Specifies the encryption setting for the SAML provider.",
          type: "string",
          required: false,
        },
        AddPrivateKey: {
          name: "Add Private Key",
          description:
            "Specifies the new private key from your external identity provider.",
          type: "string",
          required: false,
        },
        RemovePrivateKey: {
          name: "Remove Private Key",
          description: "The Key ID of the private key to remove.",
          type: "string",
          required: false,
        },
      },
      onEvent: async (input) => {
        const { region, ...commandInput } = input.event.inputConfig;

        const client = new IAMClient({
          region: region,
          credentials: {
            accessKeyId: input.app.config.accessKeyId,
            secretAccessKey: input.app.config.secretAccessKey,
            sessionToken: input.app.config.sessionToken,
          },
          ...(input.app.config.endpoint && {
            endpoint: input.app.config.endpoint,
          }),
        });

        const command = new UpdateSAMLProviderCommand(commandInput as any);
        const response = await client.send(command);

        await events.emit(response || {});
      },
    },
  },
  outputs: {
    default: {
      name: "Update SAML Provider Result",
      description: "Result from UpdateSAMLProvider operation",
      possiblePrimaryParents: ["default"],
      type: {
        type: "object",
        properties: {
          SAMLProviderArn: {
            type: "string",
            description:
              "The Amazon Resource Name (ARN) of the SAML provider that was updated.",
          },
        },
        additionalProperties: true,
      },
    },
  },
};

export default updateSAMLProvider;
